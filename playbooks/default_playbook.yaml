---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    cluster_name: 'troubadour'
    cluster_domain: 'jam01.online'
    cluster_admin_email: user@ms3-inc.com
    kubernetes_cluster:
      cloud: 'aws'
      master_count: 1
      master_size: 't2.large'
      node_count: 2
      node_size: 't2.xlarge'
      zones: 'us-east-1a,us-east-1b'
      state_bucket: 'troubadour'
      ssh_public_key: ''
    kong:
      default_ingress_controller: 'prod'
      ee_creds:
        - name: default
          license: ''
          image_registry:
            username: ''
            password: ''
      instances:
      - name: 'sandbox-kong'
        ingress_class: 'sandbox'
        kuma_mesh_name: 'sandbox'
        ee:
          enabled: false
          creds: 'default'
          keycloak_realm: 'sandbox'
      - name: 'prod-kong'
        ingress_class: 'prod'
        kuma_mesh_name: 'prod'
        ee:
          enabled: false
          creds: 'default'
          keycloak_realm: 'prod'
    kuma:
      meshes:
      - name: 'sandbox'
        mtls:
          enabled: true
      - name: 'prod'
        mtls:
          enabled: true
    namespaces:
    - name: 'dev'
      kuma_mesh_name: 'sandbox'
    - name: 'test'
      kuma_mesh_name: 'sandbox'
    - name: 'prod'
      kuma_mesh_name: 'prod'
    keycloak:
      pg:
        db: keycloak
        user: keycloak
        pass: keycloak
      realms:
      - name: sandbox
      - name: prod
    postgresql: {}
    cert_manager: {}


  tasks:
  - name: Assert binaries are available
    shell: |
      kubectl version
      kustomize version
      flux --version
      kubeseal --version
    changed_when: false

  - name: Install dependencies with pip3 module
    pip:
      name:
        # amazon.aws
        - boto3
        - botocore
        # community.kubernetes
        - openshift
        # community.aws
        - boto
      executable: pip-3
      extra_args: --user

  - import_role:
      name: ms3_inc.troubadour.kubernetes_cluster
    vars:
      cluster_state: present

  - set_fact:
      wait_conditions:
        HelmRelease:
          type: Ready
          status: true
          reason: ReconciliationSucceeded

  - import_role:
      name: ms3_inc.troubadour.fluxtoolkit

  - import_role:
      name: ms3_inc.troubadour.kubeseal

  - import_role:
      name: ms3_inc.troubadour.postgresql

  - include_role:
      name: ms3_inc.troubadour.namespace

  - include_role:
      name: ms3_inc.troubadour.kuma

  - include_role:
      name: ms3_inc.troubadour.cert_manager

  - include_role:
      name: ms3_inc.troubadour.keycloak

  - include_role:
      name: ms3_inc.troubadour.kong

  - name: Set DNS for keycloak
    when: "'dry-run' not in ansible_run_tags"
    community.aws.route53:
      state: present
      zone: "{{ cluster_domain }}"
      type: CNAME
      record: auth.{{ cluster_name }}.{{ cluster_domain }}
      value: "{{ lookup('k8s', kind='Service', namespace='kong', resource_name='kong-prod-kong-kong-proxy').status.loadBalancer.ingress[0].hostname }}"
      overwrite: true
      wait: yes

  - name: Set wildcard DNS for apps
    when: "'dry-run' not in ansible_run_tags"
    community.aws.route53:
      state: present
      zone: "{{ cluster_domain }}"
      type: CNAME
      record: "*.apps.{{ cluster_name }}.{{ cluster_domain }}"
      value: "{{ lookup('k8s', kind='Service', namespace='kong', resource_name='kong-prod-kong-kong-proxy').status.loadBalancer.ingress[0].hostname }}"
      overwrite: true
      wait: yes


# ## teardown
#   - name: Set DNS for keycloak
#     community.aws.route53:
#       state: absent
#       zone: "{{ cluster_domain }}"
#       type: CNAME
#       record: auth.{{ cluster_name }}.{{ cluster_domain }}
#       value: "{{ lookup('k8s', kind='Service', namespace='kong', resource_name='kong-prod-kong-kong-proxy').status.loadBalancer.ingress[0].hostname }}"
#       overwrite: true
#       wait: yes
#
#   - name: Set wildcard DNS for apps
#     community.aws.route53:
#       state: absent
#       zone: {{ cluster_domain }}
#       type: CNAME
#       record: "*.apps.{{ cluster_name }}.{{ cluster_domain }}"
#       value: "{{ lookup('k8s', kind='Service', namespace='kong', resource_name='kong-prod-kong-kong-proxy').status.loadBalancer.ingress[0].hostname }}"
#       overwrite: true
#       wait: yes
#
#   - import_role:
#       name: ms3_inc.troubadour.kubernetes-cluster
#     vars:
#       cluster_state: absent
