---
- name: Create directory
  file:
    path: /tmp/{{ cluster_domain }}/platform/nexus/
    state: directory

- name: Copy NS
  copy:
    src: ns.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/ns.yaml

- name: Copy Release
  copy:
    src: default-release.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/default-release.yaml

- name: Copy kustomization
  copy:
    src: kustomization.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/kustomization.yaml

- name: Process ingress template
  template:
    src: ingress.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/ingress.yaml

- name: Copy Deploy PVC
  copy:
    src: nexus-deploy-pvc.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/nexus-deploy-pvc.yaml

- name: Process keycloak-client template
  template:
    src: keycloak-client.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-client.yaml

- name: Process keycloak-config template
  template:
    src: keycloak-config.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.json

- name: Process keycloak-config secret template
  template:
    src: keycloak-config-secret.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml
  vars:
    config: "{{ lookup('file', '/tmp/' + cluster_domain + '/platform/nexus/keycloak-config.json') }}"

- name: Kubeseal keycloak-config.yaml
  when: ('dry-run' not in ansible_run_tags)
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml >/tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.tmp
    mv /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.tmp /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml
    rm /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.json

- name: Process flux-kustomization Template
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_domain }}/platform/flux-system/watches/nexus.yaml

- name: Apply manifests
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.troubadour.kustomize: /tmp/{{ cluster_domain }}/platform/nexus/
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"

- name: Install nexus3-keycloak-plugin-0.4.0-bundle.kar
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: nexus
    pod: "{{ lookup('k8s', kind='Pod', namespace='nexus', label_selector=nexus_pod_name).metadata.name }}"
    command: |
      curl -LJo /opt/sonatype/nexus/deploy/nexus3-keycloak-plugin-bundle.kar https://github.com/flytreeleft/nexus3-keycloak-plugin/releases/download/0.4.1-prev2-SNAPSHOT/nexus3-keycloak-plugin-0.4.1-SNAPSHOT-bundle.kar
  vars:
    nexus_pod_name: "app.kubernetes.io/name=nexus-repository-manager"

- name: Retreive admin.password
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: nexus
    pod: "{{ lookup('k8s', kind='Pod', namespace='nexus', label_selector=nexus_pod_name).metadata.name }}"
    command: |
      cat nexus-data/admin.password
  vars:
    nexus_pod_name: "app.kubernetes.io/name=nexus-repository-manager"
  register: nexus_creds

- name: Set Nexus Password
  when: ('dry-run' not in ansible_run_tags)
  set_fact:
    nexus: "{{ nexus | combine({ 'generated': { 'admin_creds': nexus_creds.stdout } }, recursive=True) }}"

- name: Add Keycloak Nexus Realm
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/realms/active"
    method: PUT
    status_code: 204
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_creds ) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      - 'NexusAuthenticatingRealm'
      - 'NexusAuthorizingRealm'
      - 'org.github.flytreeleft.nexus3.keycloak.plugin.KeycloakAuthenticatingRealm'
  register: _result
  until: _result.status == 204
  retries: 5
  delay: 30

- name: Add Keycloak admin Role Mapping
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_creds) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: ClientRole:nexus-admin
      name: keycloak-admin
      description: Mapping for Keycloak to Nexus Role
      roles:
      - 'nx-admin'
  register: _result
  until: _result.status == 200
  retries: 5
  delay: 30

- name: Add Keycloak developer Role
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_creds) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: developer
      name: developer
      description: Necessary permissions for developers
      # todo
      privileges:
      - nx-repository-view-maven2-maven-releases-browse
      - nx-repository-view-maven2-maven-releases-read
      - nx-repository-view-maven2-maven-snapshots-add
      - nx-repository-view-maven2-maven-snapshots-browse
      - nx-repository-view-maven2-maven-snapshots-edit
      - nx-repository-view-maven2-maven-snapshots-read
  register: _result
  until: _result.status == 200
  retries: 5
  delay: 30

- name: Add Keycloak developer Role Mapping
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_creds) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: ClientRole:developer
      name: keycloak-developer
      description: Mapping for Keycloak to Nexus Role
      roles:
      - 'developer'
  register: _result
  until: _result.status == 200
  retries: 5
  delay: 30

# todo
# add api calls to add realm-management roles to nexus service account
# add curl calls to create docker repos
# add ci service account that can read/write maven and docker
