---
- name: Create directory
  file:
    path: /tmp/{{ cluster_domain }}/platform/nexus/
    state: directory

- name: Copy NS
  copy:
    src: ns.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/ns.yaml

- name: Copy Release
  copy:
    src: default-release.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/default-release.yaml

- name: Copy kustomization
  copy:
    src: kustomization.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/kustomization.yaml

- name: Copy nexus-properties-config
  copy:
    src: nexus-properties-config.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/nexus-properties-config.yaml

- name: Process ingress template
  template:
    src: ingress.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/ingress.yaml

- name: Copy Deploy PVC
  copy:
    src: nexus-deploy-pvc.yaml
    dest: /tmp/{{ cluster_domain }}/platform/nexus/nexus-deploy-pvc.yaml

- name: Generate Keycloak Client Secret
  when: (nexus.keycloak.client_secret is not defined)
  set_fact:
    nexus: "{{ nexus | combine({ 'keycloak': { 'client_secret': uuid }} , recursive=true) }}"
  vars:
    uuid: "{{ 1000000 | random | to_uuid }}"

- name: Process oidc-plugin template
  template:
    src: oidc-plugin.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/oidc-plugin.yaml

- name: Process keycloak-client template
  template:
    src: keycloak-client.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-client.yaml

- name: Process keycloak-config template
  template:
    src: keycloak-config.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.json

- name: Process keycloak-config secret template
  template:
    src: keycloak-config-secret.j2
    dest: /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml
  vars:
    config: "{{ lookup('file', '/tmp/' + cluster_domain + '/platform/nexus/keycloak-config.json') }}"

- name: Kubeseal keycloak-config.yaml
  when: ('dry-run' not in ansible_run_tags)
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml >/tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.tmp
    mv /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.tmp /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.yaml
    rm /tmp/{{ cluster_domain }}/platform/nexus/keycloak-config.json

- name: Process flux-kustomization Template
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_domain }}/platform/flux-system/watches/nexus.yaml

- name: Apply manifests
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.tavros.kustomize: /tmp/{{ cluster_domain }}/platform/nexus/
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"
    wait_timeout: 900
  
- name: Wait for Nexus
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    kind: Pod
    label_selectors:
    - "app.kubernetes.io/name = nexus-repository-manager"
    namespace: nexus
    wait: true
    wait_timeout: 900
  changed_when: false

- name: Retreive admin.password
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: nexus
    pod: "{{ lookup('k8s', kind='Pod', namespace='nexus', label_selector=nexus_pod_name).metadata.name }}"
    command: |
      cat nexus-data/admin.password
  vars:
    nexus_pod_name: "app.kubernetes.io/name=nexus-repository-manager"
  register: nexus_creds

- name: Set Nexus Password
  when: ('dry-run' not in ansible_run_tags)
  set_fact:
    nexus: "{{ nexus | combine({ 'generated': { 'admin_password': nexus_creds.stdout } }, recursive=True) }}"

- name: Wait for Client
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: keycloak.org/v1alpha1
    kind: KeycloakClient
    name: nexus
    namespace: keycloak
  register: keycloak_def
  # https://github.com/keycloak/keycloak-operator/blob/11.0.3/deploy/crds/keycloak.org_keycloaks_crd.yaml#L175
  until: ('status' in keycloak_def.resources[0]) and (keycloak_def.resources[0].status.ready)
  retries: 30
  delay: 30
  changed_when: false

- name: Create Keycloak Nexus client roles
  when: ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.keycloak_client_roles:
    auth_keycloak_url: 'https://auth.{{ cluster_name }}.{{ cluster_domain }}/auth'
    validate_certs: false
    auth_realm: master
    auth_username: admin
    auth_password: "{{ lookup('k8s', kind='Secret', namespace='keycloak', resource_name='credential-tavros-keycloak').data.ADMIN_PASSWORD | b64decode }}"
    realm: "{{ nexus.keycloak.realm }}"
    clientId: "nexus"
    roles:
    - name: "admin"
    - name: "developer"
    serviceAccountRoles:
      clientRoles:
        realm-management:
          - name: "view-clients"
          - name: "view-users"
          - name: "view-realm"

- name: Add user client role to realm user
  blockinfile:
    marker_begin: "Begin nexus"
    marker_end: "End nexus"
    path: /tmp/{{ cluster_domain }}/platform/keycloak/default/{{ nexus.keycloak.realm }}-user.yaml
    insertafter: "    clientRoles:"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |2
            nexus:
              - admin

- name: Apply updated Keycloak User for Realm
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s:
    state: present
    src: /tmp/{{ cluster_domain }}/platform/keycloak/default/{{ nexus.keycloak.realm }}-user.yaml

- name: Add dockerhub-proxy repository
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/beta/repositories/docker/proxy"
    method: POST
    status_code: 201
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password ) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      name: dockerhub-proxy
      online: true
      storage:
        blobStoreName: default
        strictContentTypeValidation: true
      proxy:
        remoteUrl: https://registry-1.docker.io
        contentMaxAge: 1440
        metadataMaxAge: 1440
      negativeCache:
        enabled: false
        timeToLive: 1440
      httpClient:
        blocked: false
        autoBlock: false
      docker:
        v1Enabled: false
        forceBasicAuth: true
        httpPort: 5001
      dockerProxy:
        indexType: HUB
  register: _result
  until: _result.status == 201
  retries: 30
  delay: 30

- name: Add internal container image repository
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/beta/repositories/docker/hosted"
    method: POST
    status_code: 201
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password ) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      name: internal
      online: true
      storage:
        blobStoreName: default
        latestPolicy: true
        strictContentTypeValidation: true
        writePolicy: ALLOW
      docker:
        v1Enabled: false
        forceBasicAuth: true
        httpPort: 5002
  register: _result
  until: _result.status == 201
  retries: 30
  delay: 30

- name: Add container registry group repository
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/beta/repositories/docker/group"
    method: POST
    status_code: 201
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password ) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      name: container-registry
      online: true
      storage:
        blobStoreName: default
        strictContentTypeValidation: true
      group:
        memberNames:
        - dockerhub-proxy
        - internal
      docker:
        v1Enabled: false
        forceBasicAuth: true
        httpPort: 5000
  register: _result
  until: _result.status == 201
  retries: 30
  delay: 30

- name: Install nexus3-keycloak-plugin-0.4.0-bundle.kar
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: nexus
    pod: "{{ lookup('k8s', kind='Pod', namespace='nexus', label_selector=nexus_pod_name).metadata.name }}"
    command: |
      curl -LJo /opt/sonatype/nexus/deploy/nexus3-keycloak-plugin-bundle.kar https://github.com/flytreeleft/nexus3-keycloak-plugin/releases/download/0.4.1-prev2-SNAPSHOT/nexus3-keycloak-plugin-0.4.1-SNAPSHOT-bundle.kar
  vars:
    nexus_pod_name: "app.kubernetes.io/name=nexus-repository-manager"

- name: Add Keycloak Nexus Realm
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/realms/active"
    method: PUT
    status_code: 204
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password ) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      - 'NexusAuthenticatingRealm'
      - 'NexusAuthorizingRealm'
      - 'org.github.flytreeleft.nexus3.keycloak.plugin.KeycloakAuthenticatingRealm'
  register: _result
  until: _result.status == 204
  retries: 30
  delay: 30

- name: Add Keycloak admin Role Mapping
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: ClientRole:admin
      name: keycloak-admin
      description: Mapping for Keycloak to Nexus Role
      roles:
      - 'nx-admin'
  register: _result
  until: _result.status == 200
  retries: 30
  delay: 30

- name: Add Keycloak developer Role
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: developer
      name: developer
      description: Necessary permissions for developers
      # todo
      privileges:
      - nx-repository-view-maven2-maven-releases-browse
      - nx-repository-view-maven2-maven-releases-read
      - nx-repository-view-maven2-maven-snapshots-add
      - nx-repository-view-maven2-maven-snapshots-browse
      - nx-repository-view-maven2-maven-snapshots-edit
      - nx-repository-view-maven2-maven-snapshots-read
      - nx-repository-view-docker-dockerhub-proxy-browse
      - nx-repository-view-docker-dockerhub-proxy-read
      - nx-repository-view-docker-internal-add
      - nx-repository-view-docker-internal-browse
      - nx-repository-view-docker-internal-edit
      - nx-repository-view-docker-internal-read
      - nx-repository-view-docker-container-registry-add
      - nx-repository-view-docker-container-registry-browse
      - nx-repository-view-docker-container-registry-edit
      - nx-repository-view-docker-container-registry-read
  register: _result
  until: _result.status == 200
  retries: 30
  delay: 30

- name: Add Keycloak developer Role Mapping
  when: ('dry-run' not in ansible_run_tags)
  uri:
    url: "https://nexus.{{ cluster_name }}.{{ cluster_domain }}/service/rest/v1/security/roles"
    method: POST
    status_code: 200
    headers:
      Authorization: "Basic {{ ('admin:' + nexus.generated.admin_password) | b64encode }}"
    validate_certs: False
    body_format: json
    body:
      id: ClientRole:developer
      name: keycloak-developer
      description: Mapping for Keycloak to Nexus Role
      roles:
      - 'developer'
  register: _result
  until: _result.status == 200
  retries: 30
  delay: 30

- name: Enabled OIDC
  lineinfile:
    path: /tmp/{{ cluster_domain }}/platform/nexus/oidc-plugin.yaml
    line: "disabled: False"
    regexp: '^disabled: True'
    backrefs: True

- name: Apply Enabled OIDC
  when: ('dry-run' not in ansible_run_tags)
  loop: "{{ lookup('file', '/tmp/' +  cluster_domain + '/platform/nexus/oidc-plugin.yaml') | from_yaml_all | list | difference([None]) }}"
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_timeout: 900

# todo
# change admin password and disable anon access
# add ci service account that can read/write maven and docker
