---
- name: Create Directory
  loop: "{{ keycloak.realms }}"
  file:
    path: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ item.name }}
    state: directory
  tags: [ keycloak ]

- name: Generate keycloak.realms.admin_password Variables
  loop: "{{ keycloak.realms }}"
  set_fact:
    gen_keycloak_realms: "{{ (gen_keycloak_realms | default([])) + [ {'admin_password': lookup('password', '/dev/null')} | combine(item, recursive=true) ] }}"
  tags: [ keycloak ]

- name: Merge keycloak.realms.admin_password Variables
  set_fact:
    keycloak: "{{ keycloak | combine({'realms': gen_keycloak_realms}, recursive=true) }}"
  tags: [ keycloak ]

- name: Copy Files
  copy:
    src: "{{ item.name }}"
    dest: /tmp/{{ cluster_fqdn }}/platform/keycloak/{{ item.dest | default(item.name) }}
  when: item.condition | default(true)
  loop:
    - name: base-kustomization.yaml
      dest: kustomization.yaml
    - name: operator
      dest: ""
  tags: [ keycloak ]

- name: Template Default Files
  template:
    src: "{{ item.name }}.j2"
    dest: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ item.dest | default(item.name) }}.yaml
  when: item.condition | default(true)
  loop:
    - name: secret-keycloak-db
    - name: ingress
    - name: instance-kustomization
      dest: kustomization
    - name: keycloakclient-kubernetes
  tags: [ keycloak ]

- name: Copy Default Files
  copy:
    src: "{{ item.name }}"
    dest: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ item.dest | default(item.name) }}
  when: item.condition | default(true)
  loop:
    - name: keycloak.yaml
    - name: clusterrolebinding-oidc-cluster-admin.yaml
  tags: [ keycloak ]

- name: Template Realm Files
  template:
    src: "{{ item[1] }}.j2"
    dest: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ item[0].name }}/{{ item[1] }}.yaml
  with_nested:
    - "{{ keycloak.realms }}"
    - [ 'keycloakrealm', 'keycloakuser-admin' ]
  tags: [ keycloak ]

- name: Seal Secrets
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags) and (item.condition | default(true))
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_fqdn }}/platform/keycloak/{{ item.name }}.yaml >/tmp/{{ cluster_fqdn }}/platform/keycloak/{{ item.name }}.tmp
    mv /tmp/{{ cluster_fqdn }}/platform/keycloak/{{ item.name }}.tmp /tmp/{{ cluster_fqdn }}/platform/keycloak/{{ item.name }}.yaml
  loop:
    - name: default/secret-keycloak-db

- name: Apply Operator Resources
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.tavros.kustomize:  /tmp/{{ cluster_fqdn }}/platform/keycloak/operator
  loop_control:
    label: "{{ item.kind }}/{{ item.metadata.name | default('unnamed')}}"
  ms3_inc.tavros.kube:
    kubeconfig: '~/.kube/config'
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"
    wait_timeout: 900

- name: Wait for Keycloak Operator
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.kube_info:
    kubeconfig: '~/.kube/config'
    api_version: apps/v1
    kind: Deployment
    name: keycloak-operator
    namespace: keycloak
  register: keycloak_def
  until: ('status' in keycloak_def.resources[0]) and (keycloak_def.resources[0].status.readyReplicas >= 1)
  retries: 30
  delay: 30
  changed_when: false

- name: Apply Resources
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.tavros.kustomize:  /tmp/{{ cluster_fqdn }}/platform/keycloak/
  loop_control:
    label: "{{ item.kind }}/{{ item.metadata.name | default('unnamed')}}"
  ms3_inc.tavros.kube:
    kubeconfig: '~/.kube/config'
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"
    wait_timeout: 900

- name: Wait for Keycloak
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.kube_info:
    kubeconfig: '~/.kube/config'
    api_version: keycloak.org/v1alpha1
    kind: Keycloak
    name: tavros
    namespace: keycloak
  register: keycloak_def
  # https://github.com/keycloak/keycloak-operator/blob/11.0.3/deploy/crds/keycloak.org_keycloaks_crd.yaml#L175
  until: ('status' in keycloak_def.resources[0]) and (keycloak_def.resources[0].status.ready)
  retries: 30
  delay: 30
  changed_when: false

- name: Wait for Keycloak Kubernetes Client
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.kube_info:
    kubeconfig: '~/.kube/config'
    api_version: keycloak.org/v1alpha1
    kind: KeycloakClient
    name: kubernetes
    namespace: keycloak
  register: keycloak_def
  # https://github.com/keycloak/keycloak-operator/blob/11.0.3/deploy/crds/keycloak.org_keycloaks_crd.yaml#L175
  until: ('status' in keycloak_def.resources[0]) and (keycloak_def.resources[0].status.ready)
  retries: 30
  delay: 30
  changed_when: false

- name: Create Keycloak Kubernetes Client Admin Role
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.keycloak_client_roles:
    auth_keycloak_url: 'https://auth.{{ cluster_fqdn }}/auth'
    validate_certs: false
    auth_realm: master
    auth_username: admin
    auth_password: "{{ lookup('ms3_inc.tavros.kube', kubeconfig='~/.kube/config', kind='Secret', namespace='keycloak', resource_name='credential-tavros').data.ADMIN_PASSWORD | b64decode }}"
    realm: "{{ kubernetes_cluster.keycloak.realm }}"
    clientId: "kubernetes"
    roles:
    - name: "admin"
  retries: 30
  delay: 30

- name: Create Keycloak Kubernetes Client Namespace Roles
  tags: [ requires_cluster, keycloak ]
  when: ('dry-run' not in ansible_run_tags)
  loop: "{{ namespaces }}"
  ms3_inc.tavros.keycloak_client_roles:
    auth_keycloak_url: 'https://auth.{{ cluster_fqdn }}/auth'
    validate_certs: false
    auth_realm: master
    auth_username: admin
    auth_password: "{{ lookup('ms3_inc.tavros.kube', kubeconfig='~/.kube/config', kind='Secret', namespace='keycloak', resource_name='credential-tavros').data.ADMIN_PASSWORD | b64decode }}"
    realm: "{{ kubernetes_cluster.keycloak.realm }}"
    clientId: "kubernetes"
    roles:
    - name: "{{ item.name }}"
  retries: 30
  delay: 30
  
- name: Template flux-kustomization
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_fqdn }}/platform/flux-system/watches/keycloak.yaml
  tags: [ keycloak ]
