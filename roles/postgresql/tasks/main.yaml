---
- name: Create directory
  file:
    path: /tmp/{{ cluster_domain }}/platform/postgresql/
    state: directory

- name: Generate postgresql password
  when: postgresql.password is not defined
  set_fact:
    postgresql: "{{ { 'password': lookup('password', '/dev/null') } | combine(postgresql, recursive=true) }}"

- name: Generate postgres password
  when: "'postgres_password' not in postgresql"
  set_fact:
    postgresql: "{{ { 'postgres_password': lookup('password', '/dev/null') } | combine(postgresql, recursive=true) }}"

- name: Generate PG Passwords
  loop: "{{ kong.instances }}"
  set_fact:
    generated_pg_passwords: "{{ (generated_pg_passwords | default([])) + [ (item | combine({ 'pg': { 'password': password } }, recursive=true)) ] }}"
  vars:
    password: "{{ ( item.pg.password | default(lookup('password', '/dev/null')) ) }}"

- name: Combine kong with generated passwords
  when: (generated_pg_passwords is defined)
  set_fact:
    kong: "{{ kong | combine({'instances': generated_pg_passwords}, recursive=true) }}"

- name: Generate PG credentials for Gitea
  when: gitea.pg.password is not defined
  set_fact:
    gitea: "{{ gitea | combine({ 'pg': { 'password': lookup('password', '/dev/null') } } , recursive=true) }}"

- name: Generate PG credentials for Keycloak
  when: keycloak.pg.password is not defined
  set_fact:
    keycloak: "{{ keycloak | combine({ 'pg': { 'password': lookup('password', '/dev/null') } } , recursive=true) }}"

- name: Process config-secret template
  template:
    src: config-secret.j2
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/config-secret.yaml

- name: Convert config-secret to SealedSecret
  when: "'dry-run' not in ansible_run_tags"
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_domain }}/platform/postgresql/config-secret.yaml >/tmp/{{ cluster_domain }}/platform/postgresql/config-secret.tmp
    mv /tmp/{{ cluster_domain }}/platform/postgresql/config-secret.tmp /tmp/{{ cluster_domain }}/platform/postgresql/config-secret.yaml

- name: Copy postgresql schema-init-job
  copy:
    src: schema-init-job.yaml
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/schema-init-job.yaml

- name: Process setup.sql template
  template:
    src: setup.j2
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/setup.sql

- name: Copy postgresql namespace
  copy:
    src: ns.yaml
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/ns.yaml

- name: Copy postgresql default release
  copy:
    src: default-release.yaml
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/default-release.yaml

- name: Copy postgresql kustomization
  copy:
    src: kustomization.yaml
    dest: /tmp/{{ cluster_domain }}/platform/postgresql/kustomization.yaml

- name: Apply manifests
  when: "'dry-run' not in ansible_run_tags"
  with_ms3_inc.tavros.kustomize: /tmp/{{ cluster_domain }}/platform/postgresql/
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"

- name: Process flux-kustomization template
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_domain }}/platform/flux-system/watches/postgresql.yaml
