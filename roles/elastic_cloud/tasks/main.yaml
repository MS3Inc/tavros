---
- name: Create directory
  file:
    path: /tmp/{{ cluster_domain }}/platform/elastic-cloud
    state: directory

- name: Copy kube-state-metrics
  copy:
    src: kube-state-metrics
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/

- name: Generate Keycloak Client Secret
  when: (elastic_cloud.ee.enabled) and (elastic_cloud.ee.keycloak.client_secret is not defined)
  set_fact:
    elastic_cloud: "{{ elastic_cloud | combine({ 'ee': { 'keycloak': { 'client_secret': uuid }}} , recursive=true) }}"
  vars:
    uuid: "{{ 1000000 | random | to_uuid }}"

- name: Process elasticsearch template
  template:
    src: elasticsearch.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/elasticsearch.yaml

- name: Process kibana template
  template:
    src: kibana.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/kibana.yaml

- name: Copy apm-server
  when: (elastic_cloud.ee.enabled)
  copy:
    src: apm-server.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/apm-server.yaml

- name: Copy jaeger-agent
  when: (elastic_cloud.ee.enabled)
  copy:
    src: jaeger-agent.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/jaeger-agent.yaml

- name: Copy filebeat
  copy:
    src: filebeat.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/filebeat.yaml

- name: Copy heartbeat
  copy:
    src: heartbeat.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/heartbeat.yaml

- name: Copy metricbeat-perms
  copy:
    src: metricbeat-perms.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/metricbeat-perms.yaml

- name: Copy metricbeat-deployment
  copy:
    src: metricbeat-deployment.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/metricbeat-deployment.yaml

- name: Copy metricbeat-daemonset
  copy:
    src: metricbeat-daemonset.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/metricbeat-daemonset.yaml

- name: Process ingress template
  template:
    src: ingress.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/ingress.yaml

- name: Process keycloak-client template
  when: (elastic_cloud.ee.enabled)
  template:
    src: keycloak-client.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/keycloak-client.yaml

- name: Copy trial-ee-secret
  when: (elastic_cloud.ee.enabled) and (elastic_cloud.ee.trial)
  copy:
    src: trial-ee-secret.yaml
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.yaml

- name: Process ee-secret template
  when: (elastic_cloud.ee.enabled) and (not elastic_cloud.ee.trial)
  template:
    src: ee-secret.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.yaml

- name: Convert ee-secret to SealedSecrets
  when: (elastic_cloud.ee.enabled) and (not elastic_cloud.ee.trial) and ('dry-run' not in ansible_run_tags)
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.yaml >/tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.tmp
    mv /tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.tmp /tmp/{{ cluster_domain }}/platform/elastic-cloud/ee-secret.yaml

- name: Process kustomization template
  template:
    src: kustomization.j2
    dest: /tmp/{{ cluster_domain }}/platform/elastic-cloud/kustomization.yaml

- name: Process flux-kustomization template
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_domain }}/platform/flux-system/watches/elastic-cloud.yaml

- name: Apply manifests
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.tavros.kustomize: /tmp/{{ cluster_domain }}/platform/elastic-cloud/
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"
    wait_timeout: 900

- name: Wait for Elasticsearch
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: elasticsearch.k8s.elastic.co/v1
    kind: Elasticsearch
    name: elasticsearch
    namespace: elastic-system
  register: elastic_def
  until: ('status' in elastic_def.resources[0]) and (elastic_def.resources[0].status.phase == 'Ready')
  retries: 30
  delay: 30
  changed_when: false

- name: Wait for Kibana
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: kibana.k8s.elastic.co/v1
    kind: Kibana
    name: kibana
    namespace: elastic-system
  register: kibana_def
  until: ('status' in kibana_def.resources[0]) and (kibana_def.resources[0].status.health == 'green')
  retries: 30
  delay: 30
  changed_when: false

- name: Get elasticsearch-es-elastic-user object
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: elasticsearch-es-elastic-user
    namespace: elastic-system
  register: elastic_secret

- name: Set elastic_cloud elastic_secret field
  when: ('dry-run' not in ansible_run_tags)
  set_fact:
    elastic_cloud: "{{ elastic_cloud | combine({'elastic_secret': elastic_pass}, recursive=true) }}"
  vars:
    elastic_pass: "{{ elastic_secret.resources[0].data.elastic | b64decode }}"

- name: Add Role Mapping for Keycloak
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: elastic-system
    pod: "elasticsearch-es-default-0"
    command: |
      curl --insecure -X PUT https://localhost:9200/_security/role_mapping/admin?pretty --user elastic:{{ elastic_cloud.elastic_secret }} -H 'Content-Type: application/json' -d'{"roles": [ "superuser" ],"enabled": true,"rules": {"field": { "groups": "admin" }}}'
  register: elk_results

- name: Create Elastic Cloud Keycloak Client Roles
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.keycloak_client_roles:
    auth_keycloak_url: 'https://auth.{{ cluster_name }}.{{ cluster_domain }}/auth'
    validate_certs: false
    auth_realm: master
    auth_username: admin
    auth_password: "{{ lookup('k8s', kind='Secret', namespace='keycloak', resource_name='credential-tavros-keycloak').data.ADMIN_PASSWORD | b64decode }}"
    realm: "{{ elastic_cloud.ee.keycloak.realm}}"
    clientId: elastic-cloud
    roles:
    - name: "admin"

- name: Add admin client role to realm user
  when: (elastic_cloud.ee.enabled)
  blockinfile:
    marker_begin: "Begin elastic-cloud"
    marker_end: "End elastic-cloud"
    path: /tmp/{{ cluster_domain }}/platform/keycloak/default/{{ elastic_cloud.ee.keycloak.realm }}-user.yaml
    insertafter: "    clientRoles:"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |2
            elastic-cloud:
              - admin

- name: Apply updated Keycloak User for Realm
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s:
    state: present
    src: /tmp/{{ cluster_domain }}/platform/keycloak/default/{{ elastic_cloud.ee.keycloak.realm }}-user.yaml
