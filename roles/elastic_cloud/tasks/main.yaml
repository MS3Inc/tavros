---
- name: Create Directory
  file:
    path: /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/default
    state: directory

- name: Generate Keycloak Client Secret
  when: (elastic_cloud.ee.enabled) and (elastic_cloud.ee.keycloak.client_secret is not defined)
  set_fact:
    elastic_cloud: "{{ elastic_cloud | combine({ 'ee': { 'keycloak': { 'client_secret': uuid }}} , recursive=true) }}"
  vars:
    uuid: "{{ 1000000 | random | to_uuid }}"

- name: Template Files
  template:
    src: "{{ item.name }}.j2"
    dest: /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.dest | default(item.name) }}.yaml
  when: item.condition | default(true)
  loop:
    - name: kustomization
    - name: elasticsearch
      dest: default/elasticsearch
    - name: ingress
      dest: default/ingress
    - name: kibana
      dest: default/kibana
    - name: keycloakclient
      dest: default/keycloakclient
      condition: "{{ elastic_cloud.ee.enabled }}"
    - name: secret-eck-license
      condition: "{{ (elastic_cloud.ee.enabled) and (not elastic_cloud.ee.trial) }}"

- name: Copy Files
  copy:
    src: "{{ item.name }}"
    dest: /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.dest | default(item.name) }}
  when: item.condition | default(true)
  loop:
    - name: metricbeat-rbac.yaml
    - name: filebeat.yaml
      dest: default/filebeat.yaml
    - name: heartbeat.yaml
      dest: default/heartbeat.yaml
    - name: metricbeat-daemonset.yaml
      dest: default/metricbeat-daemonset.yaml
    - name: metricbeat-deployment.yaml
      dest: default/metricbeat-deployment.yaml
    - name: apmserver.yaml
      dest: default/apmserver.yaml
      condition: "{{ elastic_cloud.ee.enabled }}"
    - name: daemonset-jaeger-agent.yaml
      dest: default/daemonset-jaeger-agent.yaml
      condition: "{{ elastic_cloud.ee.enabled }}"
    - name: secret-eck-license-trial.yaml
      condition: "{{ (elastic_cloud.ee.enabled) and (elastic_cloud.ee.trial) }}"
      dest: secret-eck-license.yaml
    - name: kube-state-metrics
      dest: ""

- name: Seal Secrets
  when: ('dry-run' not in ansible_run_tags) and (item.condition | default(true))
  shell: |
    kubeseal --format=yaml </tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.name }}.yaml >/tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.name }}.tmp
    mv /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.name }}.tmp /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/{{ item.name }}.yaml
  loop:
    - name: secret-eck-license
      condition: "{{ elastic_cloud.ee.enabled }}"

- name: Apply Resources
  when: ('dry-run' not in ansible_run_tags)
  with_ms3_inc.tavros.kustomize: /tmp/{{ cluster_fqdn }}/platform/elastic-cloud/
  k8s:
    definition: "{{ item }}"
    wait: true
    wait_condition: "{{ wait_conditions[item.kind] | default(omit) }}"
    wait_timeout: 900

- name: Wait for Elasticsearch
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: elasticsearch.k8s.elastic.co/v1
    kind: Elasticsearch
    name: tavros
    namespace: elastic-system
  register: elastic_def
  until: ('status' in elastic_def.resources[0]) and (elastic_def.resources[0].status.phase == 'Ready')
  retries: 30
  delay: 30
  changed_when: false

- name: Wait for Kibana
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: kibana.k8s.elastic.co/v1
    kind: Kibana
    name: tavros
    namespace: elastic-system
  register: kibana_def
  until: ('status' in kibana_def.resources[0]) and (kibana_def.resources[0].status.health == 'green')
  retries: 30
  delay: 30
  changed_when: false

- name: Get tavros-es-elastic-user Resource
  when: ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: tavros-es-elastic-user
    namespace: elastic-system
  register: elastic_secret

- name: Set elastic_cloud.elastic_secret Variable
  when: ('dry-run' not in ansible_run_tags)
  set_fact:
    elastic_cloud: "{{ elastic_cloud | combine({'elastic_secret': elastic_pass}, recursive=true) }}"
  vars:
    elastic_pass: "{{ elastic_secret.resources[0].data.elastic | b64decode }}"

- name: Add RBAC Role Mapping for Keycloak
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s_exec:
    namespace: elastic-system
    pod: "tavros-es-default-0"
    command: |
      curl --insecure -X PUT https://localhost:9200/_security/role_mapping/admin?pretty \
        --user elastic:{{ elastic_cloud.elastic_secret }} -H 'Content-Type: application/json' \
        -d '{ "roles": [ "superuser" ], "enabled": true, "rules": { "field": { "groups": "admin" }}}'
  register: elk_results

- name: Create Keycloak elastic-cloud Client Roles
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  ms3_inc.tavros.keycloak_client_roles:
    auth_keycloak_url: 'https://auth.{{ cluster_fqdn }}/auth'
    validate_certs: false
    auth_realm: master
    auth_username: admin
    auth_password: "{{ lookup('k8s', kind='Secret', namespace='keycloak', resource_name='credential-tavros').data.ADMIN_PASSWORD | b64decode }}"
    realm: "{{ elastic_cloud.ee.keycloak.realm}}"
    clientId: elastic-cloud
    roles:
    - name: "admin"

- name: Add Keycloak elastic-cloud Client Role admin to Realm Admin User
  when: (elastic_cloud.ee.enabled)
  blockinfile:
    marker_begin: "Begin elastic-cloud"
    marker_end: "End elastic-cloud"
    path: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ elastic_cloud.ee.keycloak.realm }}/keycloakuser-admin.yaml
    insertafter: "    clientRoles:"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |2
            elastic-cloud:
              - admin

- name: Apply Updated Keycloak Realm Admin User Resource
  when: (elastic_cloud.ee.enabled) and ('dry-run' not in ansible_run_tags)
  community.kubernetes.k8s:
    state: present
    src: /tmp/{{ cluster_fqdn }}/platform/keycloak/default/{{ elastic_cloud.ee.keycloak.realm }}/keycloakuser-admin.yaml

- name: Template flux-kustomization
  template:
    src: flux-kustomization.j2
    dest: /tmp/{{ cluster_fqdn }}/platform/flux-system/watches/elastic-cloud.yaml
