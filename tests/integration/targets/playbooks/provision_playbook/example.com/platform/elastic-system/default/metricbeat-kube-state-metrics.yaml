---
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: tavros-metricbeat-kube-state-metrics
  namespace: elastic-system
spec:
  type: metricbeat
  version: 7.13.4
  elasticsearchRef:
    name: tavros
  kibanaRef:
    name: tavros
  config:
    setup.template.enabled: false
    setup.ilm.enabled: false
    setup.dashboards.enabled: false
    output.elasticsearch:
      index: "metrics-%{[data_stream.dataset]}-%{[data_stream.namespace]}"
    metricbeat:
      autodiscover:
        providers:
        - type: kubernetes
          scope: cluster
          hints:
            default_config: {}
            enabled: true
      modules:
      - module: kubernetes
        hosts: ["kube-state-metrics.kube-system:8080"]
        period: 10s
        add_metadata: true
        metricsets:
        - state_node
        - state_daemonset
        - state_deployment
        - state_replicaset
        - state_statefulset
        - state_pod
        - state_container
        - state_cronjob
        - state_resourcequota
        - state_service
        - state_persistentvolume
        - state_persistentvolumeclaim
        - state_storageclass
        - event
      - module: kubernetes
        enabled: true
        metricsets:
          - apiserver
        hosts: ["https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"]
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        ssl.certificate_authorities:
          - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        period: 30s
      - module: kubernetes
        enabled: true
        metricsets:
        - controllermanager
        hosts: ["kube-controller-manager.kube-system:10252"]
        period: 10s
      - module: kubernetes
        enabled: true
        metricsets:
        - scheduler
        hosts: ["kube-scheduler.kube-system:10251"]
        period: 10s
    processors:
    - add_fields:
        target: data_stream
        fields:
          type: metrics
          dataset: generic
          namespace: default
    - script:
        lang: javascript
        id: dataset_override
        source: >
          function process(event) {
            var ns = event.Get("kubernetes.namespace");
            if (ns != null) event.Put("data_stream.namespace", "k8s." + ns);

            var mod = event.Get("event.module");
            var ms = event.Get("metricset.name");
            if (mod != null && ms != null) event.Put("data_stream.dataset", mod + "." + ms);
          }
    - add_cloud_metadata: {}
    - add_host_metadata: {}
    - add_kubernetes_metadata: {}
  deployment:
    podTemplate:
      spec:
        serviceAccountName: metricbeat
        automountServiceAccountToken: true # some older Beat versions are depending on this settings presence in k8s context
        containers:
        - args:
          - -e
          - -c
          - /etc/beat.yml
          - -system.hostfs=/hostfs
          name: metricbeat
          volumeMounts:
          - mountPath: /hostfs/sys/fs/cgroup
            name: cgroup
          - mountPath: /var/run/docker.sock
            name: dockersock
          - mountPath: /hostfs/proc
            name: proc
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true # Allows to provide richer host metadata
        securityContext:
          runAsUser: 0
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /sys/fs/cgroup
          name: cgroup
        - hostPath:
            path: /var/run/docker.sock
          name: dockersock
        - hostPath:
            path: /proc
          name: proc
---
apiVersion: v1
kind: Service
metadata:
  name: kube-controller-manager
  namespace: kube-system
spec:
  selector:
    k8s-app: kube-controller-manager
  ports:
    - protocol: TCP
      port: 10252
      targetPort: 10252
---
apiVersion: v1
kind: Service
metadata:
  name: kube-scheduler
  namespace: kube-system
spec:
  selector:
    k8s-app: kube-scheduler
  ports:
    - protocol: TCP
      port: 10251
      targetPort: 10251
